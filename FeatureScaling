{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "72f701e3",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T02:19:56.515452Z",
     "start_time": "2024-05-31T02:19:56.512772Z"
    },
    "execution": {
     "iopub.execute_input": "2024-06-17T19:17:03.166252Z",
     "iopub.status.busy": "2024-06-17T19:17:03.165855Z",
     "iopub.status.idle": "2024-06-17T19:17:04.056902Z",
     "shell.execute_reply": "2024-06-17T19:17:04.055657Z"
    },
    "papermill": {
     "duration": 0.89906,
     "end_time": "2024-06-17T19:17:04.059423",
     "exception": false,
     "start_time": "2024-06-17T19:17:03.160363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1ccb6cee",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T02:19:56.522042Z",
     "start_time": "2024-05-31T02:19:56.518492Z"
    },
    "execution": {
     "iopub.execute_input": "2024-06-17T19:17:04.068538Z",
     "iopub.status.busy": "2024-06-17T19:17:04.067423Z",
     "iopub.status.idle": "2024-06-17T19:17:04.075494Z",
     "shell.execute_reply": "2024-06-17T19:17:04.074255Z"
    },
    "papermill": {
     "duration": 0.014854,
     "end_time": "2024-06-17T19:17:04.077778",
     "exception": false,
     "start_time": "2024-06-17T19:17:04.062924",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create a 2D array\n",
    "# Number of data points\n",
    "n = 1000\n",
    "weights = [5, 0.1]\n",
    "bias = 2\n",
    "# Generate random data for x, y, and z\n",
    "x = np.random.rand(n)\n",
    "y = np.random.rand(n) * 10\n",
    "z = weights[0]*x + weights[1]*y + bias + np.random.rand(n) * 0.1  # Add some noise\n",
    "\n",
    "# Stack the arrays\n",
    "data = np.column_stack((x, y, z))\n",
    "# Separate features and target variable\n",
    "X = data[:, :2]  # x and y coordinates\n",
    "y = data[:, 2]  # z coordinate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b87491f9",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T02:19:56.525752Z",
     "start_time": "2024-05-31T02:19:56.523524Z"
    },
    "execution": {
     "iopub.execute_input": "2024-06-17T19:17:04.085722Z",
     "iopub.status.busy": "2024-06-17T19:17:04.085325Z",
     "iopub.status.idle": "2024-06-17T19:17:04.090950Z",
     "shell.execute_reply": "2024-06-17T19:17:04.089949Z"
    },
    "papermill": {
     "duration": 0.012056,
     "end_time": "2024-06-17T19:17:04.093099",
     "exception": false,
     "start_time": "2024-06-17T19:17:04.081043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def feature_scaling(X):\n",
    "    for i in range(X.shape[1]):\n",
    "        X[:, i] = (X[:, i] - np.mean(X[:, i])) / np.std(X[:, i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "dd9b445d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T02:19:56.529274Z",
     "start_time": "2024-05-31T02:19:56.526958Z"
    },
    "execution": {
     "iopub.execute_input": "2024-06-17T19:17:04.101070Z",
     "iopub.status.busy": "2024-06-17T19:17:04.100695Z",
     "iopub.status.idle": "2024-06-17T19:17:04.106933Z",
     "shell.execute_reply": "2024-06-17T19:17:04.105882Z"
    },
    "papermill": {
     "duration": 0.012911,
     "end_time": "2024-06-17T19:17:04.109209",
     "exception": false,
     "start_time": "2024-06-17T19:17:04.096298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "w = np.zeros(X.shape[1])\n",
    "b = 0\n",
    "learning_rate = 0.9\n",
    "max_epochs = 1000\n",
    "feature_scaling(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "82d811bc",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T02:19:56.536450Z",
     "start_time": "2024-05-31T02:19:56.530783Z"
    },
    "execution": {
     "iopub.execute_input": "2024-06-17T19:17:04.117148Z",
     "iopub.status.busy": "2024-06-17T19:17:04.116783Z",
     "iopub.status.idle": "2024-06-17T19:17:05.349893Z",
     "shell.execute_reply": "2024-06-17T19:17:05.348675Z"
    },
    "papermill": {
     "duration": 1.23982,
     "end_time": "2024-06-17T19:17:05.352308",
     "exception": false,
     "start_time": "2024-06-17T19:17:04.112488",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0, Cost: 0.22144974947090934\n",
      "Training stopped at epoch 4\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "def predict(X, w, b):\n",
    "    return np.dot(X, w) + b\n",
    "\n",
    "\n",
    "def cost(X, w, b, y):\n",
    "    return np.mean((predict(X, w, b) - y) ** 2)\n",
    "\n",
    "\n",
    "def gradient(X, w, b, y):\n",
    "    y_pred = predict(X, w, b)\n",
    "    dw = np.mean((y_pred - y).reshape(X.shape[0], 1) * X, axis=0)\n",
    "    db = np.mean(y_pred - y)\n",
    "    return dw, db\n",
    "\n",
    "\n",
    "def train(X, y, w, b, learning_rate, epochs):\n",
    "    costs = []\n",
    "    prev_cost = 0\n",
    "    for i in range(epochs):\n",
    "        dw, db = gradient(X, w, b, y)\n",
    "        w -= learning_rate * dw\n",
    "        b -= learning_rate * db\n",
    "        cost_value = cost(X, w, b, y)\n",
    "        costs.append(cost_value)\n",
    "        if i % 100 == 0:\n",
    "            print(f'Epoch {i}, Cost: {cost_value}')\n",
    "        \n",
    "        # Check if the change in cost is less than 10^-3\n",
    "        if abs(prev_cost - cost_value) < 10**-5:\n",
    "            print(f'Training stopped at epoch {i}')\n",
    "            break\n",
    "        \n",
    "        prev_cost = cost_value\n",
    "\n",
    "    return w, b, costs\n",
    "# Train the model and get the costs\n",
    "w, b, costs = train(X_train, y_train, w, b, learning_rate, max_epochs)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1c90fe31",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T02:19:56.604972Z",
     "start_time": "2024-05-31T02:19:56.537363Z"
    },
    "execution": {
     "iopub.execute_input": "2024-06-17T19:17:05.360834Z",
     "iopub.status.busy": "2024-06-17T19:17:05.360439Z",
     "iopub.status.idle": "2024-06-17T19:17:05.642956Z",
     "shell.execute_reply": "2024-06-17T19:17:05.641730Z"
    },
    "papermill": {
     "duration": 0.289954,
     "end_time": "2024-06-17T19:17:05.645517",
     "exception": false,
     "start_time": "2024-06-17T19:17:05.355563",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the costs\n",
    "plt.plot(costs)\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Cost')\n",
    "plt.title('Cost over training cycles')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3ccaf245",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-05-31T02:19:56.608517Z",
     "start_time": "2024-05-31T02:19:56.605691Z"
    },
    "execution": {
     "iopub.execute_input": "2024-06-17T19:17:05.655190Z",
     "iopub.status.busy": "2024-06-17T19:17:05.654769Z",
     "iopub.status.idle": "2024-06-17T19:17:05.661554Z",
     "shell.execute_reply": "2024-06-17T19:17:05.660248Z"
    },
    "papermill": {
     "duration": 0.014432,
     "end_time": "2024-06-17T19:17:05.663951",
     "exception": false,
     "start_time": "2024-06-17T19:17:05.649519",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The cost of the model is: 0.0009086373657444672\n"
     ]
    }
   ],
   "source": [
    "# Predict the values on the test data\n",
    "y_pred = predict(X_test, w, b)\n",
    "\n",
    "# Calculate the cost\n",
    "cost_value = cost(X_test, w, b, y_test)\n",
    "\n",
    "# Print the cost\n",
    "print(f\"The cost of the model is: {cost_value}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8c32f7b",
   "metadata": {
    "papermill": {
     "duration": 0.003458,
     "end_time": "2024-06-17T19:17:05.671351",
     "exception": false,
     "start_time": "2024-06-17T19:17:05.667893",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Conclusion\n",
    "\n",
    "In our experiment, we observed the impact of feature scaling and learning rate optimization on the training process of our model.\n",
    "\n",
    "**Without Feature Scaling and Learning Rate Optimization:**\n",
    "- The model took 650 training epochs to converge. This indicates that the model was struggling to find the optimal point in the high-dimensional space, which resulted in a longer training time.\n",
    "\n",
    "**With Feature Scaling and Learning Rate Optimization:**\n",
    "- The model took only 4 training epochs to converge. This is a significant improvement over the previous scenario. By scaling the features to a similar range, we helped the model to converge faster. Additionally, optimizing the learning rate allowed the model to make more efficient steps towards the optimal point.\n",
    "\n",
    "This experiment clearly shows the importance of feature scaling and learning rate optimization in the training process of a machine learning model. By applying these techniques, we can significantly improve the efficiency of our model training."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe356665",
   "metadata": {
    "papermill": {
     "duration": 0.003453,
     "end_time": "2024-06-17T19:17:05.678489",
     "exception": false,
     "start_time": "2024-06-17T19:17:05.675036",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30715,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.30323,
   "end_time": "2024-06-17T19:17:06.304293",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-17T19:17:00.001063",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
